generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  profile      Profile?
  isAdmin      Boolean  @default(false)
  tasks        Task[]
  badges       UserBadge[]
  points       PointsLedger[]
}

model Profile {
  id               Int     @id @default(autoincrement())
  user             User    @relation(fields: [userId], references: [id])
  userId           Int     @unique
  timeZone         String?
  preferredHours   String?
  balancePreference String?
  taskCategories   String[]   @default([])
  createdAt        DateTime @default(now())
}

model Task {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  category  String
  status    String   @default("pending") // pending/completed/skipped
  duration  Int?     // minutes
  createdAt DateTime @default(now())
  dueAt     DateTime?
}

model Event {
  id        Int      @id @default(autoincrement())
  userId    Int?
  type      String
  payload   Json?
  createdAt DateTime @default(now())
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String
  target    String?
  meta      Json?
  createdAt DateTime @default(now())
}

// --- V2 Gamification ---
model Badge {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  name        String
  description String?
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  users       UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  createdAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model PointsLedger {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  delta     Int
  reason    String
  meta      Json?
  createdAt DateTime @default(now())
}
